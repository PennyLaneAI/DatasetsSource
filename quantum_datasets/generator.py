# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import gc
import networkx as nx
from tqdm.auto import tqdm
from pennylane import numpy as pnp

from .qchem import ChemDataPipeline
from .qspin import SpinDataPipeline
from .spin import IsingModel, HeisenbergModel, FermiHubbardModel, BoseHubbardModel
from .chem import read_xyz, bond_struct, geom_struct

systypes = {
    "ising": IsingModel,
    "heisenberg": HeisenbergModel,
    "fermihubbard": FermiHubbardModel,
    "bosehubbard": BoseHubbardModel,
}


# pylint: disable=dangerous-default-value, line-too-long
def qchem_data_generate(
    xyz_path, basis="STO-3G", bondlengths=[], use_bond_struct=False, folder_path=None
):
    r"""Generates data for Molecular Systems
    
    Args:
        xyz_path (str): absolute path to the `xyz` file containing basic information regarding the molecule
        basis (str): basis set (STO-3G, 6-31G or CCVPDZ) used for building the molecule and the electronic hamiltonian
        bondlenths (list): list of additional bondlengths used for data generation using the geometry in `geom_struct`
        use_bond_struct (bool): whether to use bondlengths of interest in `bond_struct` for PES generation
        folder_path (str): absolute path for storing the generated data files
    """
    data_pipeline = ChemDataPipeline()
    _, mol_name, symbols, charge, geometry, gs_bond = read_xyz(xyz_path)
    geometries, gs_bonds = [geometry], [gs_bond]

    bond_lengths = bondlengths
    if use_bond_struct:
        bond_lengths += list(bond_struct[mol_name])

    for bond in bond_lengths:
        bond = float(bond)
        gs_bonds.append(bond)
        geometries.append(pnp.array(geom_struct[mol_name](bond), requires_grad=False))

    for bond, geom in (bond_bar := tqdm(zip(gs_bonds, geometries))):
        data_pipeline.pipeline(
            molname=mol_name,
            symbols=symbols,
            geometry=pnp.array(geom, requires_grad=False) * 1.88973,  # Ang to Bohr conversion.
            charge=charge,
            basis_name=basis,
            descriptor=f"{round(bond, 3)}",
            filename=folder_path if folder_path else "",
            prog_bar=bond_bar,
        )
        gc.collect()

def qspin_data_generate(sysname, periodicity, layout, num_systems=100, folder_path=None):
    r"""Generates data for Spin Systems

    Args:
        sysname (str): type of spin model (Ising, Heisenberg, FermiHubbard, BoseHubbard) for which data has to be generated
        periodicity (bool): whether the lattice for the spin model is closed or open
        layout (list): layout for the lattice of the spin model. For example - (1, 8) or (2, 2) 
        num_systems (int): number of spins systems generated by varying the model parameters
        folder_path (str): absolute path for storing the generated data files
    """
    data_pipeline = SpinDataPipeline()
    lat = nx.grid_2d_graph(layout[0], layout[1], periodic=periodicity)
    try:
        spinsys = systypes[sysname.lower()]
    except KeyError as exc:
        raise NotImplementedError(
            "Only Ising, Heisenberg, FermiHubbard and BoseHubbard models are supported."
        ) from exc

    periodic = "closed" if periodicity else "open"
    lattice = "rectangular" if layout[0] > 1 else "chain"
    sites = f"{layout[0]}x{layout[1]}"

    if folder_path is not None:
        file_name = f"datasets/qspin/{sysname.lower()}/{periodic}/{lattice}/{sites}/{sysname.lower()}_{periodic}_{lattice}_{sites}"
    else:
        file_name = f"{folder_path}/{sysname.lower()}_{periodic}_{lattice}_{sites}"
    
    system = spinsys(num_systems, layout, lat, periodicity)
    for _ in (pbar := tqdm(range(1))):
        data_pipeline.pipeline(sysname.lower(), system, filepath=file_name, prog_bar=pbar)
        gc.collect()